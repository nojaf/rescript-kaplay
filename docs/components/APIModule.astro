---
import { Code } from "@astrojs/starlight/components";
import { Badge } from "@astrojs/starlight/components";
import Signature from "./Signature.astro";

const { apiDoc, level, showModuleName = false } = Astro.props;

const ModuleTag = `h${level}`;
const HeadingTag = `h${level + 1}`;
const ItemTag = `h${level + 2}`;
const FieldTag = `h${level + 3}`;

function tokenize(input) {
  // Split by special characters while keeping them
  const regex = /([<>,])/g;
  return input
    .split(regex)
    .map((token) => token.trim())
    .filter(Boolean);
}

function parseTokens(tokens) {
  let index = 0;

  const parseNode = () => {
    const path = tokens[index++]; // Read the current token and increment index
    let genericTypeParameters = [];

    if (tokens[index] === "<") {
      // Check for generics
      index++; // Consume "<"
      while (tokens[index] !== ">") {
        genericTypeParameters.push(parseNode());
        if (tokens[index] === ",") index++; // Consume ","
      }
      index++; // Consume ">"
    }

    return { path, genericTypeParameters };
  };

  return parseNode();
}

function parse(input) {
  const tokens = tokenize(input);
  return parseTokens(tokens);
}
---

{showModuleName && <ModuleTag>{apiDoc.id}</ModuleTag>}
{
  apiDoc.types?.length > 0 && (
    <>
      <HeadingTag id="types"> Types</HeadingTag>
      {apiDoc.types.map((type) => {
        return (
          <>
            <ItemTag id={type.name}>{type.name}</ItemTag>
            <div set:html={type.documentation} />
            <Code lang="ReScript" code={type.signature} />

            {type.detail?.kind === "record" &&
              type.detail?.items?.length > 0 && (
                <>
                  <FieldTag>Fields</FieldTag>
                  {type.detail.items.map((item) => {
                    return (
                      <div class="record-field">
                        <strong>{item.name}</strong>
                        <span>
                          <Signature
                            currentModule={apiDoc.id}
                            {...parse(item.signature)}
                          />
                        </span>
                      </div>
                    );
                  })}
                </>
              )}
          </>
        );
      })}
    </>
  )
}
{
  apiDoc.values?.length > 0 && (
    <>
      <HeadingTag id="values"> Values </HeadingTag>

      {apiDoc.values.map((value) => {
        return (
          <>
            <ItemTag id={value.name}>
              {value.name}
              {value.signature.endsWith(".comp") && (
                <Badge
                  style="margin-left: 0.5rem;"
                  text="Component"
                  variant="note"
                />
              )}
            </ItemTag>
            <div set:html={value.documentation} />
            <Code
              lang="ReScript"
              code={value.signature}
              class:list={[{ comp: value.signature.endsWith(".comp") }]}
            />
            {value.detail?.kind === "signature" && (
              <div class="signature-detail">
                {value.detail?.details?.parameters?.length > 0 && (
                  <div>
                    <FieldTag>Parameters</FieldTag>
                    {value.detail.details.parameters.map((param) => {
                      return (
                        <div class="value-parameter">
                          <Signature currentModule={apiDoc.id} {...param} />
                        </div>
                      );
                    })}
                  </div>
                )}
                <div>
                  <FieldTag>Return type</FieldTag>
                  <div class="value-parameter">
                    <Signature
                      currentModule={apiDoc.id}
                      path={value.detail.details.returnType.path}
                      genericTypeParameters={
                        value.detail.details.returnType.genericTypeParameters
                      }
                    />
                  </div>
                </div>
              </div>
            )}
          </>
        );
      })}
    </>
  )
}
{
  apiDoc.modules?.length > 0 && (
    <>
      <HeadingTag id="modules"> Modules </HeadingTag>
      {apiDoc.modules.map((m) => {
        return (
          <Astro.self apiDoc={m} level={level + 1} showModuleName={true} />
        );
      })}
    </>
  )
}
<style>
  .record-field {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    padding-bottom: 0.75rem;
    border-bottom: 1px solid var(--sl-color-gray-7);
    font-size: 1.15rem;
    line-height: 1.3rem;

    & strong {
      font-weight: 500;
    }
  }

  .signature-detail {
    display: flex;
    flex-direction: row;
    justify-content: space-between;

    & > div {
      margin-top: 0 !important;
    }
  }

  .value-parameter {
    font-size: 1.15rem;
    line-height: 1.3rem;
  }
</style>

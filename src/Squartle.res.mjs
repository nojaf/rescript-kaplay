// Generated by ReScript, PLEASE EDIT WITH CARE

import * as KaplayContext from "./KaplayContext.res.mjs";
import * as Primitive_int from "rescript/lib/es6/Primitive_int.js";

function scene() {
  KaplayContext.k.setGravity(250);
  KaplayContext.k.debug.inspect = true;
  let squirtleSpritesheetDimensions = {
    width: 167,
    height: 39
  };
  let mkSquirtleQuad = (x, y, w, h) => KaplayContext.k.quad(x / squirtleSpritesheetDimensions.width, y / squirtleSpritesheetDimensions.height, w / squirtleSpritesheetDimensions.width, h / squirtleSpritesheetDimensions.height);
  KaplayContext.k.loadSprite("squirtle", "sprites/squirtle.png", {
    anims: {
      idle: {
        frames: [0]
      },
      walk: {
        loop: true,
        speed: 12,
        frames: [
          1,
          2,
          3,
          2
        ]
      },
      jump: {
        loop: false,
        frames: [4]
      }
    },
    frames: [
      mkSquirtleQuad(0, 0, 34, 39),
      mkSquirtleQuad(35, 1, 33, 37),
      mkSquirtleQuad(70, 0, 32, 38),
      mkSquirtleQuad(104, 1, 32, 36),
      mkSquirtleQuad(137, 0, 30, 39)
    ]
  });
  KaplayContext.k.add([
    KaplayContext.k.rect(KaplayContext.k.width(), 24),
    KaplayContext.k.pos(0, KaplayContext.k.height() - 24),
    KaplayContext.k.color(KaplayContext.k.Color.fromHex("#D97744")),
    KaplayContext.k.area(),
    KaplayContext.k.body({
      isStatic: true
    })
  ]);
  let squirtle = KaplayContext.k.add([
    KaplayContext.k.pos(200, 90),
    KaplayContext.k.sprite("squirtle", {
      anim: "idle"
    }),
    KaplayContext.k.area(),
    KaplayContext.k.body(),
    "squirtle"
  ]);
  KaplayContext.k.debug.log(squirtle.numFrames().toString());
  squirtle.play("idle");
  KaplayContext.k.onKeyPress(key => {
    if (squirtle.isGrounded()) {
      switch (key) {
        case "left" :
          squirtle.play("walk");
          squirtle.flipX = false;
          return;
        case "right" :
          squirtle.play("walk");
          squirtle.flipX = true;
          return;
        case "space" :
          squirtle.play("jump");
          squirtle.jump(222);
          return;
        default:
          return;
      }
    } else {
      switch (key) {
        case "left" :
          squirtle.flipX = false;
          return;
        case "right" :
          squirtle.flipX = true;
          return;
        default:
          return;
      }
    }
  });
  KaplayContext.k.onKeyDown(key => {
    switch (key) {
      case "left" :
        squirtle.move(KaplayContext.k.vec2(- 200, 0));
        return;
      case "right" :
        squirtle.move(KaplayContext.k.vec2(200, 0));
        return;
      default:
        return;
    }
  });
  KaplayContext.k.onKeyRelease(key => {
    switch (key) {
      case "left" :
      case "right" :
        break;
      default:
        return;
    }
    if (squirtle.isGrounded()) {
      squirtle.play("idle");
      return;
    }
    
  });
  squirtle.onGround(() => {
    if (KaplayContext.k.isKeyDown("left") || KaplayContext.k.isKeyDown("right")) {
      squirtle.play("walk");
    } else {
      squirtle.play("idle");
    }
  });
  KaplayContext.k.onClick("squirtle", squirtle => {
    let current = squirtle.frame;
    let max = squirtle.numFrames();
    squirtle.frame = Primitive_int.mod_(current + 1 | 0, max);
  });
}

export {
  scene,
}
/* KaplayContext Not a pure module */

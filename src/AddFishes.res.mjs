// Generated by ReScript, PLEASE EDIT WITH CARE

import * as $$Array from "rescript/lib/es6/Array.js";
import * as PixiJs from "pixi.js";
import * as Primitive_int from "rescript/lib/es6/Primitive_int.js";

function addFishes(app) {
  let fishContainer = new PixiJs.Container();
  fishContainer.label = "fish_container";
  app.stage.addChild(fishContainer);
  let fishAssets = [
    "fish1",
    "fish2",
    "fish3",
    "fish4",
    "fish5"
  ];
  let assetsLength = fishAssets.length;
  let items = $$Array.make(5, 0).flatMap((param, idx) => {
    let fishAsset = fishAssets.at(Primitive_int.mod_(idx, assetsLength));
    if (fishAsset === undefined) {
      return [];
    }
    let fish = PixiJs.Sprite.from(fishAsset);
    fish.anchor.set(0.5);
    fish.direction = Math.random() * Math.PI * 2;
    fish.speed = 2 + Math.random() * 2;
    fish.turnSpeed = Math.random() - 0.8;
    fish.x = Math.random() * app.screen.width;
    fish.y = Math.random() * app.screen.height;
    fish.scale.set(0.5 + Math.random() * 0.2);
    return [fish];
  });
  fishContainer.addChild(...items);
}

function animateFishes(app, fishes, _time) {
  let boundWidth = app.screen.width + 100 * 2;
  let boundHeight = app.screen.height + 100 * 2;
  fishes.forEach(fish => {
    fish.direction = fish.direction + fish.turnSpeed * 0.01;
    fish.x = fish.x + Math.sin(fish.direction) * fish.speed;
    fish.y = fish.y + Math.cos(fish.direction) * fish.speed;
    fish.rotation = - fish.direction - Math.PI / 2;
    if (fish.x < - 100) {
      fish.x = fish.x + boundWidth;
    }
    if (fish.x > app.screen.width + 100) {
      fish.x = fish.x - boundWidth;
    }
    if (fish.y < - 100) {
      fish.y = fish.y + boundHeight;
    }
    if (fish.y > app.screen.height + 100) {
      fish.y = fish.y - boundHeight;
      return;
    }
    
  });
}

export {
  addFishes,
  animateFishes,
}
/* pixi.js Not a pure module */

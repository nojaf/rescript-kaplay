// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Keys from "./Keys.res.mjs";
import * as Rxjs from "rxjs";
import * as Bunny from "./Bunny.res.mjs";
import * as PixiJs from "pixi.js";
import * as AddFishes from "./AddFishes.res.mjs";
import * as AddBackground from "./AddBackground.res.mjs";
import * as Primitive_option from "rescript/lib/es6/Primitive_option.js";

let app = new PixiJs.Application();

async function setup() {
  await app.init({
    background: "#1099bb",
    resizeTo: Primitive_option.some(window)
  });
  document.body.appendChild(app.canvas);
}

async function preload() {
  let assets = [
    {
      alias: "background",
      src: "https://pixijs.com/assets/tutorials/fish-pond/pond_background.jpg"
    },
    {
      alias: "fish1",
      src: "https://pixijs.com/assets/tutorials/fish-pond/fish1.png"
    },
    {
      alias: "fish2",
      src: "https://pixijs.com/assets/tutorials/fish-pond/fish2.png"
    },
    {
      alias: "fish3",
      src: "https://pixijs.com/assets/tutorials/fish-pond/fish3.png"
    },
    {
      alias: "fish4",
      src: "https://pixijs.com/assets/tutorials/fish-pond/fish4.png"
    },
    {
      alias: "fish5",
      src: "https://pixijs.com/assets/tutorials/fish-pond/fish5.png"
    },
    {
      alias: "overlay",
      src: "https://pixijs.com/assets/tutorials/fish-pond/wave_overlay.png"
    },
    {
      alias: "displacement",
      src: "https://pixijs.com/assets/tutorials/fish-pond/displacement_map.png"
    },
    {
      alias: "bunny",
      src: "https://pixijs.com/assets/bunny.png"
    }
  ];
  await PixiJs.Assets.load(assets);
}

async function main() {
  await setup();
  await preload();
  AddBackground.addBackground(app);
  AddFishes.addFishes(app);
  let bunny = Bunny.addBunny(app);
  let fishContainer = app.stage.children.find(c => c.label === "fish_container");
  let fishes = fishContainer !== undefined ? fishContainer.children.map(prim => prim) : [];
  app.ticker.add(time => AddFishes.animateFishes(app, fishes, time));
  let tickerObservable = new Rxjs.Observable(subscriber => {
    let tick = delta => subscriber.next(delta);
    app.ticker.add(tick);
    return () => {
      app.ticker.remove(tick);
    };
  });
  let bunnyPositionObservable = Rxjs.combineLatest(Keys.keyMapObservable, tickerObservable).pipe(Rxjs.scan((param, param$1) => {
    let tick = param$1[1];
    let keys = param$1[0];
    let hasKey = key => {
      if (keys.has(key)) {
        return 5 * tick.deltaTime;
      } else {
        return 0;
      }
    };
    let nextX = param[0] + hasKey("ArrowRight") - hasKey("ArrowLeft");
    let nextY = param[1] + hasKey("ArrowDown") - hasKey("ArrowUp");
    return [
      nextX,
      nextY
    ];
  }, [
    bunny.x,
    bunny.y
  ]));
  return bunnyPositionObservable.subscribe(param => {
    bunny.x = param[0];
    bunny.y = param[1];
  });
}

main();

export {
  app,
  setup,
  preload,
  main,
}
/* app Not a pure module */

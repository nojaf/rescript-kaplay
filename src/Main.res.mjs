// Generated by ReScript, PLEASE EDIT WITH CARE

import Kaplay from "kaplay";
import * as Primitive_int from "rescript/lib/es6/Primitive_int.js";

let screen = {
  width: 720,
  height: 280
};

let k = Kaplay({
  width: screen.width,
  height: screen.height,
  global: false,
  background: "#6495ED",
  scale: 1
});

k.setGravity(250);

k.debug.inspect = true;

let squirtleSpritesheetDimensions = {
  width: 167,
  height: 39
};

function mkSquirtleQuad(x, y, w, h) {
  return k.quad(x / squirtleSpritesheetDimensions.width, y / squirtleSpritesheetDimensions.height, w / squirtleSpritesheetDimensions.width, h / squirtleSpritesheetDimensions.height);
}

k.loadSprite("squirtle", "sprites/squirtle.png", {
  anims: {
    idle: {
      frames: [0]
    },
    walk: {
      loop: true,
      speed: 12,
      frames: [
        1,
        2,
        3,
        2
      ]
    },
    jump: {
      loop: false,
      frames: [4]
    }
  },
  frames: [
    mkSquirtleQuad(0, 0, 34, 39),
    mkSquirtleQuad(35, 1, 33, 37),
    mkSquirtleQuad(70, 0, 32, 38),
    mkSquirtleQuad(104, 1, 32, 36),
    mkSquirtleQuad(137, 0, 30, 39)
  ]
});

let ground = k.add([
  k.rect(k.width(), 24),
  k.pos(0, k.height() - 24 | 0),
  k.color("#D97744"),
  k.area(),
  k.body({
    isStatic: true
  })
]);

let squirtle = k.add([
  k.pos(200, 90),
  k.sprite("squirtle", {
    anim: "idle"
  }),
  k.area(),
  k.body(),
  "squirtle"
]);

k.debug.log(squirtle.numFrames().toString());

squirtle.play("idle");

k.onKeyPress(key => {
  if (squirtle.isGrounded()) {
    switch (key) {
      case "left" :
        squirtle.play("walk");
        squirtle.flipX = false;
        return;
      case "right" :
        squirtle.play("walk");
        squirtle.flipX = true;
        return;
      case "space" :
        squirtle.play("jump");
        squirtle.jump(222);
        return;
      default:
        return;
    }
  } else {
    switch (key) {
      case "left" :
        squirtle.flipX = false;
        return;
      case "right" :
        squirtle.flipX = true;
        return;
      default:
        return;
    }
  }
});

k.onKeyDown(key => {
  switch (key) {
    case "left" :
      squirtle.move(-200, 0);
      return;
    case "right" :
      squirtle.move(200, 0);
      return;
    default:
      return;
  }
});

k.onKeyRelease(key => {
  switch (key) {
    case "left" :
    case "right" :
      break;
    default:
      return;
  }
  if (squirtle.isGrounded()) {
    squirtle.play("idle");
    return;
  }
  
});

squirtle.onGround(() => {
  if (k.isKeyDown("left") || k.isKeyDown("right")) {
    squirtle.play("walk");
  } else {
    squirtle.play("idle");
  }
});

k.onClick("squirtle", squirtle => {
  let current = squirtle.frame;
  let max = squirtle.numFrames();
  squirtle.frame = Primitive_int.mod_(current + 1 | 0, max);
});

let speed = 200;

export {
  screen,
  k,
  squirtleSpritesheetDimensions,
  mkSquirtleQuad,
  ground,
  squirtle,
  speed,
}
/* k Not a pure module */

// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Kaplay from "./Kaplay.res.mjs";
import * as Stdlib_Array from "rescript/lib/es6/Stdlib_Array.js";
import * as KaplayContext from "./KaplayContext.res.mjs";
import * as Stdlib_Option from "rescript/lib/es6/Stdlib_Option.js";
import * as Primitive_option from "rescript/lib/es6/Primitive_option.js";

Kaplay.GameObjImpl({});

function homing(speed, strength, from, target, timer, maxDistance) {
  return {
    id: "homing",
    update: function () {
      let self = this ;
      if (self.homingTimer > 0) {
        let toTarget = target.pos.sub(self.pos).unit();
        self.homingVelocity = self.homingVelocity.lerp(toTarget.scale(speed), strength);
        self.homingTimer = self.homingTimer - KaplayContext.k.dt();
      }
      self.move(self.homingVelocity);
      if (self.pos.dist(from) >= maxDistance) {
        self.destroy();
        return;
      }
      
    },
    add: function () {
      let self = this ;
      self.homingVelocity = target.pos.sub(from).unit().scale(speed);
      self.homingTimer = timer;
    }
  };
}

let Homing = {
  homing: homing
};

let bubbleColors = [
  KaplayContext.k.Color.fromHex("#00bcff"),
  KaplayContext.k.Color.fromHex("#a2f4fd"),
  KaplayContext.k.Color.fromHex("#155dfc")
];

Kaplay.GameObjImpl({});

let bulletSpeed = KaplayContext.k.vec2(200, 200);

function shoot(from, maxDistance) {
  return {
    id: "shooting",
    add: function () {
      let self = this ;
      self.inSight = new Map();
      self.onCollide("enemy", (e, param) => {
        self.inSight.set(e.id, e);
      });
      self.onCollideEnd("enemy", e => {
        self.inSight.delete(e.id);
      });
      self.loopController = KaplayContext.k.loop(0.227, () => {
        let next = self.inSight.values().next();
        Stdlib_Option.forEach(next.value, enemy => {
          let bulletColor = bubbleColors[KaplayContext.k.randi(0, 2)];
          let bullet = KaplayContext.k.add([
            KaplayContext.k.pos(from),
            KaplayContext.k.area(),
            "bullet",
            KaplayContext.k.z(0),
            KaplayContext.k.circle(KaplayContext.k.randi(4, 6), {
              fill: true
            }),
            KaplayContext.k.color(bulletColor),
            homing(bulletSpeed, 0.1, from, enemy, 0.5, maxDistance)
          ]);
          bullet.onCollide("enemy", (pkmn, param) => {
            bullet.destroy();
            pkmn.hurt(1);
            Stdlib_Option.forEach(pkmn.get("solid-heart").at(0), heart => {
              heart.play("empty");
              heart.untag("solid-heart");
            });
          });
        });
      });
    },
    destroy: function () {
      let self = this ;
      Stdlib_Option.forEach(self.loopController, loopController => {
        loopController.cancel();
      });
    }
  };
}

let Shooting = {
  shoot: shoot
};

function circlePolygon(center, radius, segmentsOpt) {
  let segments = segmentsOpt !== undefined ? segmentsOpt : 32;
  let points = Stdlib_Array.fromInitializer(segments, idx => {
    let theta = idx / segments * 2 * Math.PI;
    return KaplayContext.k.vec2(center.x + Math.cos(theta) * radius, center.y + Math.sin(theta) * radius);
  });
  return Kaplay.mathPolygon(KaplayContext.k, points);
}

function onSceneLoad() {
  KaplayContext.k.add([
    KaplayContext.k.pos(0, 400),
    KaplayContext.k.rect(KaplayContext.k.width(), 100),
    KaplayContext.k.color(KaplayContext.k.Color.fromHex("#cad5e2"))
  ]);
  let tower = KaplayContext.k.add([
    KaplayContext.k.pos(KaplayContext.k.width() / 2 | 0, 320),
    KaplayContext.k.circle(30, {
      fill: true
    }),
    KaplayContext.k.color(KaplayContext.k.Color.fromHex("#e2e8f0")),
    KaplayContext.k.body(),
    "tower",
    {
      id: "towerGuy",
      add: function () {
        let tower = this ;
        tower.add([
          KaplayContext.k.sprite("squirtle"),
          KaplayContext.k.anchor("center"),
          KaplayContext.k.color(KaplayContext.k.Color.fromHex("#00d3f2")),
          KaplayContext.k.z(10)
        ]);
      }
    }
  ]);
  tower.add([
    KaplayContext.k.circle(200, {
      fill: true
    }),
    KaplayContext.k.color(KaplayContext.k.Color.fromHex("#D1FEB8")),
    KaplayContext.k.opacity(0),
    KaplayContext.k.area({
      shape: Primitive_option.some(circlePolygon(KaplayContext.k.vec2(0, 0), 200, 32))
    }),
    shoot(tower.pos, 200)
  ]);
  let regularColor = KaplayContext.k.Color.fromHex("#fe9441");
  KaplayContext.k.loop(1.0, () => {
    KaplayContext.k.add([
      KaplayContext.k.sprite("charmander", {
        height: 36,
        flipX: true
      }),
      KaplayContext.k.color(regularColor),
      "enemy",
      KaplayContext.k.pos(50, 450),
      KaplayContext.k.area(),
      KaplayContext.k.anchor("center"),
      KaplayContext.k.move(KaplayContext.k.vec2(1, 0), 100),
      KaplayContext.k.offscreen({
        destroy: true
      }),
      KaplayContext.k.health(3),
      {
        id: "hearts",
        add: function () {
          let charmander = this ;
          let hp = charmander.hp();
          for (let i = 1; i <= hp; ++i) {
            charmander.add([
              KaplayContext.k.pos(25 - (i * 15 | 0) | 0, -35),
              KaplayContext.k.sprite("heart", {
                width: 10,
                height: 10
              }),
              "solid-heart"
            ]);
          }
          charmander.onHurt(param => {
            let tc = KaplayContext.k.tween(1, 0.5, 0.1, opacity => {
              charmander.opacity = opacity;
            }, KaplayContext.k.easings.linear);
            tc.onEnd(() => {
              KaplayContext.k.tween(0.5, 1, 0.1, opacity => {
                charmander.opacity = opacity;
              }, KaplayContext.k.easings.linear);
            });
          });
          charmander.onDeath(() => {
            KaplayContext.k.destroy(charmander);
          });
        }
      }
    ]);
  });
}

function scene() {
  KaplayContext.k.loadSprite("charmander", "/sprites/charmander-rb.png");
  KaplayContext.k.loadSprite("squirtle", "/sprites/squirtle-rb.png");
  KaplayContext.k.loadSprite("heart", "/sprites/heart.png", {
    sliceX: 2,
    sliceY: 1,
    anims: {
      solid: {
        from: 0,
        to: 0
      },
      empty: {
        from: 1,
        to: 1
      }
    },
    anim: "solid"
  });
  KaplayContext.k.onLoad(onSceneLoad);
}

export {
  Homing,
  Shooting,
  circlePolygon,
  onSceneLoad,
  scene,
}
/*  Not a pure module */

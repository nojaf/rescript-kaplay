// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Kaplay from "./Kaplay.res.mjs";
import * as Stdlib_Array from "rescript/lib/es6/Stdlib_Array.js";
import * as KaplayContext from "./KaplayContext.res.mjs";
import * as Primitive_option from "rescript/lib/es6/Primitive_option.js";

function homing(velocity, timer) {
  return {
    homingVelocity: velocity,
    homingTimer: timer
  };
}

let Homing = {
  homing: homing
};

function circlePolygon(center, radius, segmentsOpt) {
  let segments = segmentsOpt !== undefined ? segmentsOpt : 32;
  let points = Stdlib_Array.fromInitializer(segments, idx => {
    let theta = idx / segments * 2 * Math.PI;
    return KaplayContext.k.vec2(center.x + Math.cos(theta) * radius, center.y + Math.sin(theta) * radius);
  });
  return Kaplay.mathPolygon(KaplayContext.k, points);
}

function scene() {
  KaplayContext.k.debug.inspect = true;
  KaplayContext.k.loadSprite("charmander", "/sprites/charmander-rb.png");
  KaplayContext.k.add([
    KaplayContext.k.pos(0, 400),
    KaplayContext.k.rect(KaplayContext.k.width(), 100),
    KaplayContext.k.color(KaplayContext.k.Color.fromHex("#D1E2F3"))
  ]);
  let tower = KaplayContext.k.add([
    KaplayContext.k.pos(KaplayContext.k.width() / 2 | 0, 320),
    KaplayContext.k.circle(50, {
      fill: true
    }),
    KaplayContext.k.color(KaplayContext.k.Color.fromHex("#D1FEB8")),
    KaplayContext.k.body(),
    "tower"
  ]);
  let viewport = tower.add([
    KaplayContext.k.circle(200, {
      fill: true
    }),
    KaplayContext.k.color(KaplayContext.k.Color.fromHex("#D1FEB8")),
    KaplayContext.k.opacity(0.2),
    KaplayContext.k.area({
      shape: Primitive_option.some(circlePolygon(KaplayContext.k.vec2(0, 0), 200, 32))
    })
  ]);
  let regularColor = KaplayContext.k.Color.fromHex("#fe9441");
  KaplayContext.k.loop(3, () => {
    let charmander = KaplayContext.k.add([
      KaplayContext.k.sprite("charmander", {
        height: 36
      }),
      KaplayContext.k.color(regularColor),
      "pkmn",
      KaplayContext.k.pos(50, 450),
      KaplayContext.k.area(),
      KaplayContext.k.anchor("center"),
      KaplayContext.k.move(KaplayContext.k.vec2(1, 0), 100),
      KaplayContext.k.offscreen({
        destroy: true
      }),
      KaplayContext.k.health(3)
    ]);
    charmander.onDeath(() => {
      KaplayContext.k.destroy(charmander);
    });
  });
  let bulletSpeed = KaplayContext.k.vec2(300, 300);
  viewport.onCollide("pkmn", (pkmn, param) => {
    pkmn.color = KaplayContext.k.Color.fromHex("#FF0000");
    let from = tower.pos;
    let bullet = KaplayContext.k.add([
      KaplayContext.k.pos(from),
      KaplayContext.k.area(),
      "bullet",
      KaplayContext.k.circle(8, {
        fill: true
      }),
      KaplayContext.k.color(KaplayContext.k.Color.fromHex("#0D0D0D")),
      homing(pkmn.pos.sub(from).unit().scale(bulletSpeed), 0.5)
    ]);
    bullet.onUpdate(() => {
      if (bullet.homingTimer > 0) {
        let toTarget = pkmn.pos.sub(bullet.pos).unit();
        bullet.homingVelocity = bullet.homingVelocity.lerp(toTarget.scale(bulletSpeed), 0.1);
        bullet.homingTimer = bullet.homingTimer - KaplayContext.k.dt();
      }
      bullet.move(bullet.homingVelocity);
    });
    bullet.onCollide("pkmn", (pkmn, param) => {
      KaplayContext.k.debug.log("bullet hit pkmn");
      pkmn.color = KaplayContext.k.Color.fromHex("#000000");
      bullet.destroy();
      pkmn.hurt(1);
    });
  });
  viewport.onCollideEnd("pkmn", pkmn => {
    pkmn.color = regularColor;
  });
}

export {
  Homing,
  circlePolygon,
  scene,
}
/* KaplayContext Not a pure module */

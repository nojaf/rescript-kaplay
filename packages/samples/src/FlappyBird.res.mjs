// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Z$Kaplay from "@nojaf/rescript-kaplay/src/Components/Z.res.mjs";
import * as Pos$Kaplay from "@nojaf/rescript-kaplay/src/Components/Pos.res.mjs";
import * as Area$Kaplay from "@nojaf/rescript-kaplay/src/Components/Area.res.mjs";
import * as Body$Kaplay from "@nojaf/rescript-kaplay/src/Components/Body.res.mjs";
import * as GameContext from "./GameContext.res.mjs";
import * as Move$Kaplay from "@nojaf/rescript-kaplay/src/Components/Move.res.mjs";
import * as Rect$Kaplay from "@nojaf/rescript-kaplay/src/Components/Rect.res.mjs";
import * as Text$Kaplay from "@nojaf/rescript-kaplay/src/Components/Text.res.mjs";
import * as Color$Kaplay from "@nojaf/rescript-kaplay/src/Components/Color.res.mjs";
import * as Anchor$Kaplay from "@nojaf/rescript-kaplay/src/Components/Anchor.res.mjs";
import * as Rotate$Kaplay from "@nojaf/rescript-kaplay/src/Components/Rotate.res.mjs";
import * as Sprite$Kaplay from "@nojaf/rescript-kaplay/src/Components/Sprite.res.mjs";
import * as Outline$Kaplay from "@nojaf/rescript-kaplay/src/Components/Outline.res.mjs";
import * as OffScreen$Kaplay from "@nojaf/rescript-kaplay/src/Components/OffScreen.res.mjs";
import * as Primitive_option from "rescript/lib/es6/Primitive_option.js";
import * as GameObjRaw$Kaplay from "@nojaf/rescript-kaplay/src/Components/GameObjRaw.res.mjs";

let score = "score";

let gameOver = "gameOver";

let Events = {
  score: score,
  gameOver: gameOver
};

let score$1 = "score";

let die = "die";

let Sounds = {
  score: score$1,
  die: die
};

let game = "flappy-bird";

let gameOver$1 = "gameOver";

let Scenes = {
  game: game,
  gameOver: gameOver$1
};

GameObjRaw$Kaplay.Comp({});

Pos$Kaplay.Comp({});

Sprite$Kaplay.Comp({});

Body$Kaplay.Comp({});

Color$Kaplay.Comp({});

Anchor$Kaplay.Comp({});

Area$Kaplay.Comp({});

Rotate$Kaplay.Comp({});

OffScreen$Kaplay.Comp({});

let tag = "bird";

let spriteName = "pidgeotto";

function make() {
  let bird = GameContext.k.add([
    GameContext.k.pos(GameContext.k.center()),
    GameContext.k.sprite(spriteName, {
      flipX: true
    }),
    GameContext.k.body(),
    GameContext.k.color(GameContext.k.Color.fromHex("#ffb86a")),
    GameContext.k.anchor("center"),
    GameContext.k.area(),
    GameContext.k.rotate(0),
    GameContext.k.offscreen({
      destroy: true
    }),
    tag
  ]);
  bird.onExitScreen(() => {
    bird.trigger(gameOver, undefined);
  });
  let fly = bird => {
    bird.jump(100);
    bird.rotateBy(-15);
    GameContext.k.tween(-15, 0, 0.5, extra => {
      bird.angle = extra;
    });
  };
  GameContext.k.onKeyRelease(key => {
    if (key === "space") {
      return fly(bird);
    }
    
  });
  GameContext.k.onTouchEnd((param, param$1) => {
    console.log("touch end");
    fly(bird);
  });
  return bird;
}

let Bird = {
  tag: tag,
  spriteName: spriteName,
  make: make
};

GameObjRaw$Kaplay.Comp({});

Pos$Kaplay.Comp({});

Move$Kaplay.Comp({});

Area$Kaplay.Comp({});

OffScreen$Kaplay.Comp({});

Rect$Kaplay.Comp({});

Color$Kaplay.Comp({});

Outline$Kaplay.Comp({});

let tag$1 = "pipe";

function make$1(gap) {
  let x = GameContext.k.width() - 50;
  let gapHeight = GameContext.k.height() * gap;
  let remainingHeight = GameContext.k.height() - gapHeight;
  let topPipeHeight = GameContext.k.rand(0.20, 0.80) * remainingHeight;
  let bottomPipeHeight = remainingHeight - topPipeHeight;
  let topPipe = GameContext.k.add([
    GameContext.k.pos(x, 0),
    GameContext.k.rect(50, topPipeHeight),
    GameContext.k.color(GameContext.k.Color.fromHex("#bbf451")),
    GameContext.k.move(GameContext.k.Vec2.LEFT, 200),
    GameContext.k.offscreen({
      destroy: true
    }),
    GameContext.k.area(),
    GameContext.k.outline(3, GameContext.k.Color.fromHex("#404040")),
    tag$1
  ]);
  let bottomPipe = GameContext.k.add([
    GameContext.k.pos(x, GameContext.k.height() - bottomPipeHeight),
    GameContext.k.rect(50, bottomPipeHeight),
    GameContext.k.color(GameContext.k.Color.fromHex("#bbf451")),
    GameContext.k.move(GameContext.k.Vec2.LEFT, 200),
    GameContext.k.area(),
    GameContext.k.outline(3, GameContext.k.Color.fromHex("#404040")),
    tag$1
  ]);
  topPipe.onCollide(tag, (_bird, _collision) => {
    topPipe.trigger(gameOver, undefined);
  });
  bottomPipe.onCollide(tag, (_bird, _collision) => {
    bottomPipe.trigger(gameOver, undefined);
  });
  let ctrl = {
    contents: undefined
  };
  ctrl.contents = Primitive_option.some(topPipe.onUpdate(() => {
    if (topPipe.pos.x >= GameContext.k.width() / 2) {
      return;
    }
    let ctrl$1 = ctrl.contents;
    if (ctrl$1 !== undefined) {
      Primitive_option.valFromOption(ctrl$1).cancel();
    }
    topPipe.trigger(score, 1);
  }));
}

let Pipes = {
  width: 50,
  tag: tag$1,
  speed: 200,
  make: make$1
};

GameObjRaw$Kaplay.Comp({});

Pos$Kaplay.Comp({});

Color$Kaplay.Comp({});

Text$Kaplay.Comp({});

Anchor$Kaplay.Comp({});

Z$Kaplay.Comp({});

function make$2(text, x, y, anchorOpt) {
  let anchor = anchorOpt !== undefined ? anchorOpt : "center";
  return GameContext.k.add([
    GameContext.k.pos(x, y),
    GameContext.k.color(GameContext.k.Color.fromHex("#024a70")),
    GameContext.k.text(text),
    GameContext.k.z(1),
    GameContext.k.anchor(anchor)
  ]);
}

let Text = {
  make: make$2
};

function makeGameState() {
  return {
    score: 0,
    speed: 2.0,
    lastUpdate: 0,
    gap: 0.40
  };
}

function scene() {
  GameContext.k.loadSprite(spriteName, import.meta.env.BASE_URL + "/sprites/pidgeotto-rb.png");
  GameContext.k.loadSound(score$1, import.meta.env.BASE_URL + "/sounds/score.wav");
  GameContext.k.loadSound(die, import.meta.env.BASE_URL + "/sounds/die.wav");
  GameContext.k.setBackground(GameContext.k.Color.fromHex("#cefafe"));
  GameContext.k.setGravity(100);
  let gameState = {
    score: 0,
    speed: 2.0,
    lastUpdate: 0,
    gap: 0.40
  };
  let bird = make();
  let scoreText = make$2("Score: " + gameState.score.toString(), 25, 25, "topleft");
  let helpText = make$2("Press <space> to go up!", 25.0, GameContext.k.height() - 25, "botleft");
  GameContext.k.wait(2.5, () => {
    helpText.destroy();
  });
  GameContext.k.on(score, tag$1, (_pipe, score$2) => {
    let birdIsColliding = bird.getCollisions().some(param => true);
    if (!birdIsColliding) {
      gameState.score = gameState.score + score$2 | 0;
      gameState.gap = gameState.gap - 0.02;
      scoreText.text = "Score: " + gameState.score.toString();
      GameContext.k.play(score$1);
      return;
    }
    
  });
  GameContext.k.on(gameOver, tag$1, (_pipe, param) => {
    GameContext.k.play(die);
    GameContext.k.go(gameOver$1, gameState.score);
  });
  make$1(gameState.gap);
  GameContext.k.onUpdate(() => {
    gameState.lastUpdate = gameState.lastUpdate + GameContext.k.dt();
    if (gameState.lastUpdate > gameState.speed) {
      make$1(gameState.gap);
      gameState.lastUpdate = 0;
      return;
    }
    
  });
}

function gameOver$2(score) {
  let centerX = GameContext.k.center().x;
  let y = GameContext.k.height() / 4;
  make$2("Game Over", centerX, y, undefined);
  make$2("Score: " + score.toString(), centerX, y + 100, undefined);
  make$2("(Click to replay)", centerX, y + 200, undefined);
  GameContext.k.onClick(() => {
    GameContext.k.go(game);
  });
}

GameContext.k.scene(game, scene);

GameContext.k.scene(gameOver$1, gameOver$2);

export {
  Events,
  Sounds,
  Scenes,
  Bird,
  Pipes,
  Text,
  makeGameState,
  scene,
  gameOver$2 as gameOver,
}
/*  Not a pure module */

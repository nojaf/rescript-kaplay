// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Base from "./aux/Base.res.mjs";
import Kaplay from "kaplay";
import * as Z$Kaplay from "@nojaf/rescript-kaplay/src/Components/Z.res.mjs";
import * as Pos$Kaplay from "@nojaf/rescript-kaplay/src/Components/Pos.res.mjs";
import * as Area$Kaplay from "@nojaf/rescript-kaplay/src/Components/Area.res.mjs";
import * as Body$Kaplay from "@nojaf/rescript-kaplay/src/Components/Body.res.mjs";
import * as Rect$Kaplay from "@nojaf/rescript-kaplay/src/Components/Rect.res.mjs";
import * as Color$Kaplay from "@nojaf/rescript-kaplay/src/Components/Color.res.mjs";
import * as Primitive_int from "rescript/lib/es6/Primitive_int.js";
import * as Sprite$Kaplay from "@nojaf/rescript-kaplay/src/Components/Sprite.res.mjs";
import * as Context$Kaplay from "@nojaf/rescript-kaplay/src/Context.res.mjs";
import * as OffScreen$Kaplay from "@nojaf/rescript-kaplay/src/Components/OffScreen.res.mjs";
import * as Primitive_option from "rescript/lib/es6/Primitive_option.js";
import * as GameObjRaw$Kaplay from "@nojaf/rescript-kaplay/src/Components/GameObjRaw.res.mjs";

let k = Kaplay({
  width: 800,
  height: 400,
  global: false,
  background: "#dff2fe",
  scale: Base.scale
});

Pos$Kaplay.Comp({});

Area$Kaplay.Comp({});

Body$Kaplay.Comp({});

function make() {
  let leftPos = k.Vec2.ZERO;
  k.add([
    k.pos(leftPos),
    k.area({
      shape: Primitive_option.some(Context$Kaplay.mathRect(k, leftPos, 1, k.height()))
    }),
    k.body({
      isStatic: true
    })
  ]);
  let rightPos = k.vec2(k.width() - 1, 0);
  k.add([
    k.pos(rightPos),
    k.area({
      shape: Primitive_option.some(Context$Kaplay.mathRect(k, k.Vec2.ZERO, 1, k.width() - 1))
    }),
    k.body({
      isStatic: true
    })
  ]);
}

let GameBounds = {
  make: make
};

Pos$Kaplay.Comp({});

Sprite$Kaplay.Comp({});

Area$Kaplay.Comp({});

Body$Kaplay.Comp({});

OffScreen$Kaplay.Comp({});

let tag = "squirtle";

function make$1(x, y) {
  return k.add([
    k.pos(x, y),
    k.sprite("squirtle", {
      anim: "idle"
    }),
    k.area(),
    k.body(),
    tag
  ]);
}

let Squirtle = {
  tag: tag,
  jumpSpeed: 222,
  make: make$1
};

Pos$Kaplay.Comp({});

Area$Kaplay.Comp({});

Rect$Kaplay.Comp({});

Color$Kaplay.Comp({});

Body$Kaplay.Comp({});

function make$2(x, y, w, h) {
  return k.add([
    k.pos(x, y),
    k.rect(w, h),
    k.color(k.Color.fromHex("#D97744")),
    k.area(),
    k.body({
      isStatic: true
    })
  ]);
}

let Ground = {
  make: make$2
};

GameObjRaw$Kaplay.Comp({});

Pos$Kaplay.Comp({});

Area$Kaplay.Comp({});

Sprite$Kaplay.Comp({});

Z$Kaplay.Comp({});

function spawn(x, y) {
  let coin = k.add([
    k.pos(x, y),
    k.area(),
    k.sprite("coin", {
      height: 20,
      anim: "spin"
    }),
    k.z(-1)
  ]);
  coin.onCollide(tag, (_squirtle, param) => {
    coin.destroy();
    k.play("score");
  });
}

let Coin = {
  height: 20,
  spawn: spawn
};

function scene() {
  k.setGravity(250);
  k.loadSound("score", import.meta.env.BASE_URL + "/sounds/score.wav");
  let squirtleSpritesheetDimensions = {
    width: 167,
    height: 39
  };
  let mkSquirtleQuad = (x, y, w, h) => k.quad(x / squirtleSpritesheetDimensions.width, y / squirtleSpritesheetDimensions.height, w / squirtleSpritesheetDimensions.width, h / squirtleSpritesheetDimensions.height);
  k.loadSprite("squirtle", import.meta.env.BASE_URL + "/sprites/squirtle.png", {
    anims: {
      idle: {
        frames: [0]
      },
      walk: {
        loop: true,
        speed: 12,
        frames: [
          1,
          2,
          3,
          2
        ]
      },
      jump: {
        loop: false,
        frames: [4]
      }
    },
    frames: [
      mkSquirtleQuad(0, 0, 34, 39),
      mkSquirtleQuad(35, 1, 33, 37),
      mkSquirtleQuad(70, 0, 32, 38),
      mkSquirtleQuad(104, 1, 32, 36),
      mkSquirtleQuad(137, 0, 30, 39)
    ]
  });
  let mkCoinQuad = (x, w) => k.quad(x / 384, 0, w / 384, 1);
  k.loadSprite("coin", import.meta.env.BASE_URL + "/sprites/coin.png", {
    anims: {
      spin: {
        loop: true,
        frames: [
          0,
          1,
          2,
          3,
          4
        ]
      }
    },
    frames: [
      mkCoinQuad(0, 70),
      mkCoinQuad(92, 48),
      mkCoinQuad(180, 31),
      mkCoinQuad(250, 49),
      mkCoinQuad(320, 64)
    ]
  });
  make();
  let ground = make$2(0, k.height() - 24, k.width(), 24);
  make$2(k.width() / 3, k.height() - 4 * 24, k.width() / 6, 24);
  let squirtle = make$1(200, k.height() * 0.6);
  squirtle.play("idle");
  spawn(k.width() / 2, k.rand(k.height() - 20 - 222 + squirtle.height, k.height() - 20 - ground.height));
  k.onKeyPress(key => {
    if (squirtle.isGrounded()) {
      switch (key) {
        case "left" :
          squirtle.play("walk");
          squirtle.flipX = false;
          return;
        case "right" :
          squirtle.play("walk");
          squirtle.flipX = true;
          return;
        case "space" :
          squirtle.play("jump");
          squirtle.jump(222);
          return;
        default:
          return;
      }
    } else {
      switch (key) {
        case "left" :
          squirtle.flipX = false;
          return;
        case "right" :
          squirtle.flipX = true;
          return;
        default:
          return;
      }
    }
  });
  k.onKeyDown(key => {
    switch (key) {
      case "left" :
        squirtle.move(k.vec2(- 200, 0));
        return;
      case "right" :
        squirtle.move(k.vec2(200, 0));
        return;
      default:
        return;
    }
  });
  k.onKeyRelease(key => {
    switch (key) {
      case "left" :
      case "right" :
        break;
      default:
        return;
    }
    if (squirtle.isGrounded()) {
      squirtle.play("idle");
      return;
    }
    
  });
  squirtle.onGround(() => {
    if (k.isKeyDown("left") || k.isKeyDown("right")) {
      squirtle.play("walk");
    } else {
      squirtle.play("idle");
    }
  });
  k.onClick("squirtle", squirtle => {
    let current = squirtle.frame;
    let max = squirtle.numFrames();
    squirtle.frame = Primitive_int.mod_(current + 1 | 0, max);
  });
}

k.scene("game", scene);

k.go("game");

export {
  k,
  GameBounds,
  Squirtle,
  Ground,
  Coin,
  scene,
}
/* k Not a pure module */

---
description: 
globs: 
alwaysApply: true
---
You are an export in ReScript & Kaplay.
You write high performant functional programming code.
We creating a Tower defense game and are exploring the capabilities of Kaplay. 

# Project rules

## Project Structure
- Source files are organized in the `src/` directory
- Each game entity (Tower, Squartle, etc.) has its own module
- Shared utilities and types are placed in appropriate modules
- Keep the build output in `lib/` directory

## ReScript

- You use the latest ReScript v12 alpha.
- Ensure suggestions match this version. Refer to the indexed ReScript manual.
- You write functional code but are pragmatic. If it is necessary to mutate state, you will do so if it benefits performance.
- The Kaplay bindings are located in [Kaplay.res](mdc:src/Kaplay.res), these should match the definitions from [npm](mdc:node_modules/kaplay/dist/doc.d.ts). There is no strong desire to have bindings for everything, so we add bindings when we need them.
- Use meaningful type aliases for game-specific types
- Prefer immutable data structures where possible. If performance demands mutable state, then allow it.
- Use pattern matching for complex logic flows

## Kaplay

- Prefer using the `Vec2.t` type as input.
- We are targetting both mobile and desktop browsers.
- Keep game objects modular and reusable
- Use appropriate layers for different game elements
- Use Scenes in Kaplay to split up different sections of the game.

## Game Development

- Each game entity should be self-contained with its own state management
- Implement proper error handling for game mechanics
- Use the helpers from Kaplay instead whenever possible.
- Implement proper game state management
- Use appropriate design patterns for game entities
- Consider performance implications of game mechanics

## Testing

- Write unit tests for core game mechanics
- Assume we are using Bun as unit testing framework.

## Performance

- Optimize for 60 FPS gameplay
- Use appropriate data structures for performance-critical operations
- Implement proper garbage collection strategies
- Profile and optimize hot paths in the game loop
- Use appropriate level of detail for different game elements

## Code Style

- Use consistent naming conventions
- Write clear and concise documentation. If a function has a considerable complexity, add a high level comment to document what it is doing.
- Keep functions focused and single-purpose
- Use appropriate module organization
- Follow ReScript best practices for type safety

## Kaplay

- Prefer using the `Vec2.t` type as input.
- We are targetting both mobile and desktop browsers.